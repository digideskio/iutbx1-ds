Note d'utilisation de git pour Ludwig :

1. Copie du dépôt git :

   $ git clone git@github.com:skypers/iutbx1-ds.git
   $ cd iutbx1-ds


2. Gestion des commits

   Comme pour svn, tu dois spécifier quels fichiers doivent être pris en compte
   pour le prochain commit. Tu le fais commen avec svn :

   $ git add <file>

   Une fois que tu as ajouté tous les fichiers à commit, tu effectues simplement
   le commit :

   $ git commit -m 'nts'

   Attention, tu devras toujours spécifier les fichiers à commit avec git add.
   Par convention, on utilise git add uniquement lors du premier commit des
   fichiers. Par la suite, utilise simplement :

   $ git commit -a -m 'nts'

   '-a' pour all, évidemment.

   Une fois que tu as fait pleins de commits intéressants, tu peux déplacer le
   tout avec push :

   $ git push


3. Pleins de trucs

   Comme avec svn, tu as pleins de trucs sympas. En voici quelques exemples
   utiles :

   $ git log
   $ git diff
   $ git status

   Un truc important aussi, c'est de régler ta configuration git. Pour toi c'est
   simple :

   $ git config --global user.name 'Ludwig pseudo Raepsaet'
   $ git config --global user.email ludwig.raepsaet@etu-u.bordeaux1.fr

   Voila en gros ...


4. Gestion des branches :

   Les branches permettent de gérer le travail collaboratif parallèle. En fait,
   ça permet de créer des sortes de dossiers virtuels. Les modifications que
   tu effectues dans une branche ne sont répercutés nul par ailleurs. C'est là
   l'utilité de la chose : si tu veux tester deux trois trucs, crée une branch !
   Si c'est convaiquant, tu vas pouvoir fusionner ta branche à une autre. Sinon,
   tu n'auras qu'à supprimer la branche.

   ** Lister les branches du serveur :
   
   $ git branch -r

   ** Lister les branches locales :

   $ git branch

   ** Tracker une branche distante :
      Tu ne comprends peut être pas le principe. En fait, avant de pouvoir
      travailler sur une branche, tu dois la "tracker", c'est à dire suivre
      son historique et son évolution sur le serveur. Pour le faire simplement :

      $ git checkout origin/dev -b dev

      Ici je crée une nouvelle branche nommée 'dev', laquelle va tracker la
      branche distante 'dev' (plus précisémment 'origin/dev'), la branche du
      serveur ... Tu peux ensuite voir que la branche est disponible en locale :

      $ git branch

      Tu peux donc changer de branche aisément avec checkout :

      $ git checkout master

      Ici on revient sur la branche principale. Si tu veux revenir sur dev :

      $ git checkout dev

   ** Travailler en local
      Si tu n'as pas envie de travailler sur une branche distante, car tu juges
      que le travail que tu fais ne te prendras pas beaucoup de temps, mais que
      la création d'une branche est tout de même nécessaire, tu peux créer une
      branche locale à ton dépôt (ne pas l'envoyer sur le serveur quoi ...) :

      $ git branch super_branche_locale
      $ git checkout super_branche_locale

      Si tu souhaites sauter vers la branche dès que tu l'as créée, tu peux le
      faire en une seule commande :

      $ git checkout -b super_branche_locale

   ** Envoi d'une branche sur le serveur
      Je ne suis pas certain que tu en auras besoin, mais ça peut tout de même
      arriver. Si tu juges que ta branche va te prendre beaucoup de temps, ou
      alors que je devrais t'aider à travailler dessus, tu devras déplacer ta
      branche en l'envoyant sur le serveur. Pour le faire :

      $ git branch experimental

      Ici je crée une branche 'experimental'. Pour l'envoyer sur le serveur :

      $ git push origin origin:refs/heads/experimental

      En faisant cela, la branche sera accessible sur le serveur. Tu peux
      t'en assurer en listant les branches distantes :

      $ git branch -r

      Mais attention, ici la branche sera reliÃ©e Ã  HEAD, Ã  savoir la branche 
      master ... Ce n'est pas ce que tu voudras (et ce n'est pas ce que je veux).
      Dans le pire des cas, relie ta branche Ã  dev :
      
      $ git push origin origin/dev:refs/heads/experimental
      
